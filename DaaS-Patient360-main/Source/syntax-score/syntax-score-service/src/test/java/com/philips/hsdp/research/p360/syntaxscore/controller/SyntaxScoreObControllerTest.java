/*
 * (C) Koninklijke Philips Electronics N.V. 2021
 *
 * All rights are reserved. Reproduction or transmission in whole or in part, in any form or by any
 * means, electronic, mechanical or otherwise, is prohibited without the prior written consent of
 * the copyright owner.
 */

package com.philips.hsdp.research.p360.syntaxscore.controller;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.io.UnsupportedEncodingException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.philips.hsdp.research.p360.syntaxscore.datamodel.enums.Dominance;
import com.philips.hsdp.research.p360.syntaxscore.datamodel.enums.SideBranchAtTheOriginOfOcclusion;
import com.philips.hsdp.research.p360.syntaxscore.datamodel.enums.TriState;

/* @author Priyanka Mallick */
@ExtendWith(MockitoExtension.class)
class SyntaxScoreObControllerTest {

	@InjectMocks
	SyntaxScoreObservationController observationController;
	
	@Test
	void selectedSegmentsTest() throws JsonProcessingException, UnsupportedEncodingException {
		String segmentString = "eyJudW1iZXIiOiIxMiIsIm5hbWUiOiJJbnRlcm1lZGlhdGUvYW50ZXJvbGF0ZXJhbCIsImRlc2NyaXB0aW9uIjoiIn0=";
		observationController.selectedSegments(segmentString);
		assertNotNull(segmentString);
	}

	@Test
	void selectedSegmentsMultipartTest() throws Exception {
		MockMultipartFile file = new MockMultipartFile("file", "test.json", MediaType.APPLICATION_JSON_VALUE, "{\"number\":\"12\",\"name\":\"Intermediate/anterolateral\",\"description\":\"\"}".getBytes());
		String result = observationController.selectedSegments(file);
		assertNotNull(result);
	}
	
	@Test
	void firstSegmentNumberOfTotalOcclusionTest() throws JsonProcessingException, UnsupportedEncodingException {
		String segmentString = "eyJudW1iZXIiOiIxMiIsIm5hbWUiOiJJbnRlcm1lZGlhdGUvYW50ZXJvbGF0ZXJhbCIsImRlc2NyaXB0aW9uIjoiQnJhbmNoIGZyb20gdHJpZnVyY2F0aW5nIGxlZnQgbWFpbiBvdGhlciB0aGFuIHByb3hpbWFsIExBRCBvciBMQ1guIEJlbG9uZ3MgdG8gdGhlIGNpcmN1bWZsZXggdGVycml0b3J5LiJ9";
		observationController.firstSegmentNumberOfTotalOcclusion(segmentString);
		assertNotNull(segmentString);
	}
	
	@Test
	void firstSegmentNumberOfTotalOcclusionMultipartTest() throws Exception {
		MockMultipartFile file = new MockMultipartFile("file", "test.json", MediaType.APPLICATION_JSON_VALUE, "{\"number\":\"12\",\"name\":\"Intermediate/anterolateral\",\"description\":\"Branch from trifurcating left main other than proximal LAD or LCX. Belongs to the circumflex territory.\"}".getBytes());
		String result = observationController.firstSegmentNumberOfTotalOcclusion(file);
		assertNotNull(result);
	}
	
	@Test
	void ageOfTOGt3MonthsTest() throws Throwable {
		int lesionNumber = 0;
		String str = observationController.ageOfTOGt3Months(TriState.NO, lesionNumber);
		assertNotNull(str);
	}

	@Test
	void bluntStumpTest() throws Throwable {
		String str = observationController.bluntStump(false, 0);
		assertNotNull(str);
	}

	@Test
	void BridgingTest() throws Throwable {
		String str = observationController.bridging(true, 0);
		assertNotNull(str);
	}

	@Test
	void sidebranchAtTheOriginOfOcclusionTest() throws Throwable {
		int lesionNumber = 0;
		String str = observationController.sideBranchAtTheOriginOfOcclusion(SideBranchAtTheOriginOfOcclusion.NO, lesionNumber);
		assertNotNull(str);
	}

	@Test
	void trifurcationTest() throws Throwable {
		boolean present = true;
		int lesionNumber = 0;
		String str = observationController.trifurcation(present, lesionNumber);
		assertNotNull(str);
	}

	@Test
	void bifurcationAngulationLt70Test() throws Throwable {
		boolean present = true;
		int lesionNumber = 0;
		String str = observationController.bifurcationAngulationLt70(present, lesionNumber);
		assertNotNull(str);
	}

	@Test
	void aortoOstialTest() throws Throwable {
		boolean present = false;
		int lesionNumber = 0;
		String str = observationController.aortoOstial(present, lesionNumber);
		assertNotNull(str);
	}

	@Test
	void severeTortuosityTest() throws Exception {
		String str = observationController.severeTortuosity(true, 0);
		assertNotNull(str);
	}

	@Test
	void selectedDominanceTest() throws Throwable {
		String str = observationController.selectedDominance(Dominance.LEFT);
		assertNotNull(str);
	}

	@Test
	void lengthGt20mmTest() throws Throwable {
		boolean present = true;
		int lesionNumber = 0;
		String syntaxScoreObservationXml = observationController.lengthGt20mm(present, lesionNumber);
		assertNotNull(syntaxScoreObservationXml);
	}

	@Test
	void heavyCalcificationTest() throws Throwable {
		String syntaxScoreObservationXml = observationController.heavyCalcification(true, 0);
		assertNotNull(syntaxScoreObservationXml);
	}

	@Test
	void thrombusOstialTest() throws Throwable {
		String syntaxScoreObservationXml = observationController.thrombusOstial(true, 0);
		assertNotNull(syntaxScoreObservationXml);
	}

	@Test
	void segmentsTest() throws Throwable {
		String segmentString = "eyJudW1iZXIiOiIxMSIsIm5hbWUiOiJQcm94aW1hbCBjaXJjdW1mbGV4IiwiZGVzY3JpcHRpb24iOiJNYWluIHN0ZW0gb2YgY2lyY3VtZmxleCBmcm9tIGl0cyBvcmlnaW4gb2YgbGVmdCBtYWluIHRvIGFuZCBpbmNsdWRpbmcgb3JpZ2luIG9mIGZpcnN0IG9idHVzZSBtYXJnaW5hbCBicmFuY2guIn0=";
		observationController.segments(segmentString);
		assertNotNull(segmentString);
	}
	
	@Test
	void segmentsMultipartTest() throws Exception {
		MockMultipartFile file = new MockMultipartFile("file", "test.json", MediaType.APPLICATION_JSON_VALUE, "{\"number\":\"11\",\"name\":\"Proximal circumflex\",\"description\":\"Main stem of circumflex from its origin of left main to and including origin of first obtuse marginal branch.\"}".getBytes());
		String result = observationController.segments(file);
		assertNotNull(result);
	}

	@Test
	void lesionTotalOcclusionSubSyntaxScoreTest() throws Throwable {
		String lesionObservationlist = "";
		int lesionNumber = 0;
		String syntaxScoreObservationXml = observationController.lesionTotalOcclusionSubSyntaxScore(lesionObservationlist, lesionNumber);
		assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void lesionTotalOcclusionSubSyntaxScoreMultipartTest() throws Exception {
		int lesionNumber = 0;
		 MockMultipartFile file = new MockMultipartFile("file", "test.xml", MediaType.APPLICATION_XML_VALUE, "<Observation><id value=\"bab603ef-901d-46fc-8275-342a8f6738e1\"></id></Observation>".getBytes());
		 MockMultipartFile[] fileNew = {file};
		 String syntaxScoreObservationXml = observationController.lesionTotalOcclusionSubSyntaxScore(fileNew, lesionNumber);
		 assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void lesionSyntaxSubscoreTotalOcclusionTest() throws Throwable {
		String toObservationList = "";
		String syntaxScoreObservationXml = observationController.lesionSyntaxSubscoreTotalOcclusion(toObservationList, true);
		assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void lesionSyntaxSubscoreTotalOcclusionMultipartTest() throws Exception {
		 MockMultipartFile file = new MockMultipartFile("file", "test.xml", MediaType.APPLICATION_XML_VALUE, "<Observation><id value=\"bab603ef-901d-46fc-8275-342a8f6738e1\"></id></Observation>".getBytes());
		 MockMultipartFile[] fileNew = {file};
		 String syntaxScoreObservationXml = observationController.lesionSyntaxSubscoreTotalOcclusion(fileNew, true);
		 assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void syntaxScoreTest() throws Throwable {
		String observationList = "";
		String syntaxScoreObservationXml = observationController.syntaxScore(observationList);
		assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void syntaxScoreMultipartTest() throws Exception {
		 MockMultipartFile file = new MockMultipartFile("file", "test.xml", MediaType.APPLICATION_XML_VALUE, "<Observation><id value=\"bab603ef-901d-46fc-8275-342a8f6738e1\"></id></Observation>".getBytes());
		 MockMultipartFile[] fileNew = {file};
		 String syntaxScoreObservationXml = observationController.syntaxScore(fileNew);
		 assertNotNull(syntaxScoreObservationXml);
	}
	
	@Test
	void subsyntaxScoreDiffuselydiseasedTest() {
		String diffuselydiseasedString = "PE9ic2VydmF0aW9uIHhtbG5zPSJodHRwOi8vaGw3Lm9yZy9maGlyIj4KICAgPGlkIHZhbHVlPSI0ODJiYmQ5YS1mYjc4LTQ3Y2MtYjEwNS01MWI5NGRmYmI0YTIiLz4KICAgPG1ldGE-CiAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwczovL3d3dy5maGlyLnBoaWxpcHMuY29tLzQuMC9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NhcmRpb2xvZ3kvY29yb25hcnlBcnRlcnlEaXNlYXNlL3Njb3JlL3N5bnRheFNjb3JlLXYxL2xlc2lvblN5bnRheFN1YnNjb3JlL0xlc2lvblN5bnRheFN1YnNjb3JlU2VnbWVudCIvPgogICA8L21ldGE-CiAgIDxzdGF0dXMgdmFsdWU9InJlZ2lzdGVyZWQiLz4KICAgPGNhdGVnb3J5PgogICAgICA8Y29kaW5nPgogICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29ic2VydmF0aW9uLWNhdGVnb3J5Ii8-CiAgICAgICAgIDxjb2RlIHZhbHVlPSJzdXJ2ZXkiLz4KICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlN1cnZleSIvPgogICAgICA8L2NvZGluZz4KICAgPC9jYXRlZ29yeT4KICAgPGNvZGU-CiAgICAgIDxjb2Rpbmc-CiAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiLz4KICAgICAgICAgPGNvZGUgdmFsdWU9IjI2NDE5MzAwNSIvPgogICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iU2VnbWVudCIvPgogICAgICA8L2NvZGluZz4KICAgPC9jb2RlPgogICA8c3ViamVjdD4KICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iUGF0aWVudC9pbHMtdGVzdC1DQURQYXRpZW50Ii8-CiAgIDwvc3ViamVjdD4KICAgPGVmZmVjdGl2ZURhdGVUaW1lIHZhbHVlPSIyMDIyLTA5LTI2VDExOjQ0OjUwKzA1OjMwIi8-CiAgIDx2YWx1ZVF1YW50aXR5PgogICAgICA8dmFsdWUgdmFsdWU9IjciLz4KICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3VuaXRzb2ZtZWFzdXJlLm9yZyIvPgogICAgICA8Y29kZSB2YWx1ZT0ie3Njb3JlfSIvPgogICA8L3ZhbHVlUXVhbnRpdHk-CiAgIDxib2R5U2l0ZT4KICAgICAgPGNvZGluZz4KICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cHM6Ly9zeW50YXhzY29yZTIwMjAuY29tIi8-CiAgICAgICAgIDxjb2RlIHZhbHVlPSIxMmIiLz4KICAgICAgICAgPGRpc3BsYXkgdmFsdWU9Ik9idHVzZSBtYXJnaW5hbCBiIi8-CiAgICAgIDwvY29kaW5nPgogICA8L2JvZHlTaXRlPgo8L09ic2VydmF0aW9uPgosIDxPYnNlcnZhdGlvbiB4bWxucz0iaHR0cDovL2hsNy5vcmcvZmhpciI-CiAgIDxpZCB2YWx1ZT0iMjk3MDk5MWUtMDQ4NC00NWFmLThiODUtY2UyNDEwOWQzMDY2Ii8-CiAgIDxtZXRhPgogICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cHM6Ly93d3cuZmhpci5waGlsaXBzLmNvbS80LjAvU3RydWN0dXJlRGVmaW5pdGlvbi9jYXJkaW9sb2d5L2Nvcm9uYXJ5QXJ0ZXJ5RGlzZWFzZS9zY29yZS9zeW50YXhTY29yZS12MS9sZXNpb25TeW50YXhTdWJzY29yZS9MZXNpb25TeW50YXhTdWJzY29yZVNlZ21lbnQiLz4KICAgPC9tZXRhPgogICA8c3RhdHVzIHZhbHVlPSJyZWdpc3RlcmVkIi8-CiAgIDxjYXRlZ29yeT4KICAgICAgPGNvZGluZz4KICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9vYnNlcnZhdGlvbi1jYXRlZ29yeSIvPgogICAgICAgICA8Y29kZSB2YWx1ZT0ic3VydmV5Ii8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJTdXJ2ZXkiLz4KICAgICAgPC9jb2Rpbmc-CiAgIDwvY2F0ZWdvcnk-CiAgIDxjb2RlPgogICAgICA8Y29kaW5nPgogICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vc25vbWVkLmluZm8vc2N0Ii8-CiAgICAgICAgIDxjb2RlIHZhbHVlPSIyNjQxOTMwMDUiLz4KICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlNlZ21lbnQiLz4KICAgICAgPC9jb2Rpbmc-CiAgIDwvY29kZT4KICAgPHN1YmplY3Q-CiAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlBhdGllbnQvaWxzLXRlc3QtQ0FEUGF0aWVudCIvPgogICA8L3N1YmplY3Q-CiAgIDxlZmZlY3RpdmVEYXRlVGltZSB2YWx1ZT0iMjAyMi0wOS0yNlQxMTo0NDo1MCswNTozMCIvPgogICA8dmFsdWVRdWFudGl0eT4KICAgICAgPHZhbHVlIHZhbHVlPSI3Ii8-CiAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly91bml0c29mbWVhc3VyZS5vcmciLz4KICAgICAgPGNvZGUgdmFsdWU9IntzY29yZX0iLz4KICAgPC92YWx1ZVF1YW50aXR5PgogICA8Ym9keVNpdGU-CiAgICAgIDxjb2Rpbmc-CiAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHBzOi8vc3ludGF4c2NvcmUyMDIwLmNvbSIvPgogICAgICAgICA8Y29kZSB2YWx1ZT0iMTJhIi8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJPYnR1c2UgbWFyZ2luYWwgYSIvPgogICAgICA8L2NvZGluZz4KICAgPC9ib2R5U2l0ZT4KPC9PYnNlcnZhdGlvbj4KLCA8T2JzZXJ2YXRpb24geG1sbnM9Imh0dHA6Ly9obDcub3JnL2ZoaXIiPgogICA8aWQgdmFsdWU9IjdhY2JjMzliLTM5N2EtNGUwNC05ZjZkLTEyYjc4YmEzZWNiMyIvPgogICA8bWV0YT4KICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHBzOi8vd3d3LmZoaXIucGhpbGlwcy5jb20vNC4wL1N0cnVjdHVyZURlZmluaXRpb24vY2FyZGlvbG9neS9jb3JvbmFyeUFydGVyeURpc2Vhc2Uvc2NvcmUvc3ludGF4U2NvcmUtdjEvbGVzaW9uU3ludGF4U3Vic2NvcmUvTGVzaW9uU3ludGF4U3Vic2NvcmVTZWdtZW50Ii8-CiAgIDwvbWV0YT4KICAgPHN0YXR1cyB2YWx1ZT0icmVnaXN0ZXJlZCIvPgogICA8Y2F0ZWdvcnk-CiAgICAgIDxjb2Rpbmc-CiAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb2JzZXJ2YXRpb24tY2F0ZWdvcnkiLz4KICAgICAgICAgPGNvZGUgdmFsdWU9InN1cnZleSIvPgogICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iU3VydmV5Ii8-CiAgICAgIDwvY29kaW5nPgogICA8L2NhdGVnb3J5PgogICA8Y29kZT4KICAgICAgPGNvZGluZz4KICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIvPgogICAgICAgICA8Y29kZSB2YWx1ZT0iMjY0MTkzMDA1Ii8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJTZWdtZW50Ii8-CiAgICAgIDwvY29kaW5nPgogICA8L2NvZGU-CiAgIDxzdWJqZWN0PgogICAgICA8cmVmZXJlbmNlIHZhbHVlPSJQYXRpZW50L2lscy10ZXN0LUNBRFBhdGllbnQiLz4KICAgPC9zdWJqZWN0PgogICA8ZWZmZWN0aXZlRGF0ZVRpbWUgdmFsdWU9IjIwMjItMDktMjZUMTE6NDQ6NTArMDU6MzAiLz4KICAgPHZhbHVlUXVhbnRpdHk-CiAgICAgIDx2YWx1ZSB2YWx1ZT0iNyIvPgogICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnIi8-CiAgICAgIDxjb2RlIHZhbHVlPSJ7c2NvcmV9Ii8-CiAgIDwvdmFsdWVRdWFudGl0eT4KICAgPGJvZHlTaXRlPgogICAgICA8Y29kaW5nPgogICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwczovL3N5bnRheHNjb3JlMjAyMC5jb20iLz4KICAgICAgICAgPGNvZGUgdmFsdWU9IjEyIi8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJJbnRlcm1lZGlhdGUvYW50ZXJvbGF0ZXJhbCIvPgogICAgICA8L2NvZGluZz4KICAgPC9ib2R5U2l0ZT4KPC9PYnNlcnZhdGlvbj4KLCA8T2JzZXJ2YXRpb24geG1sbnM9Imh0dHA6Ly9obDcub3JnL2ZoaXIiPgogICA8aWQgdmFsdWU9ImFkY2RjZDQ4LWMzNDYtNDVhMy05ZGNmLWJmMDVhNzM3NzgzZSIvPgogICA8bWV0YT4KICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHBzOi8vd3d3LmZoaXIucGhpbGlwcy5jb20vNC4wL1N0cnVjdHVyZURlZmluaXRpb24vY2FyZGlvbG9neS9jb3JvbmFyeUFydGVyeURpc2Vhc2Uvc2NvcmUvc3ludGF4U2NvcmUtdjEvbGVzaW9uU3ludGF4U3Vic2NvcmUvTGVzaW9uU3ludGF4U3Vic2NvcmVTZWdtZW50Ii8-CiAgIDwvbWV0YT4KICAgPHN0YXR1cyB2YWx1ZT0icmVnaXN0ZXJlZCIvPgogICA8Y2F0ZWdvcnk-CiAgICAgIDxjb2Rpbmc-CiAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vb2JzZXJ2YXRpb24tY2F0ZWdvcnkiLz4KICAgICAgICAgPGNvZGUgdmFsdWU9InN1cnZleSIvPgogICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iU3VydmV5Ii8-CiAgICAgIDwvY29kaW5nPgogICA8L2NhdGVnb3J5PgogICA8Y29kZT4KICAgICAgPGNvZGluZz4KICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIvPgogICAgICAgICA8Y29kZSB2YWx1ZT0iMjY0MTkzMDA1Ii8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJTZWdtZW50Ii8-CiAgICAgIDwvY29kaW5nPgogICA8L2NvZGU-CiAgIDxzdWJqZWN0PgogICAgICA8cmVmZXJlbmNlIHZhbHVlPSJQYXRpZW50L2lscy10ZXN0LUNBRFBhdGllbnQiLz4KICAgPC9zdWJqZWN0PgogICA8ZWZmZWN0aXZlRGF0ZVRpbWUgdmFsdWU9IjIwMjItMDktMjZUMTE6NDQ6NTArMDU6MzAiLz4KICAgPHZhbHVlUXVhbnRpdHk-CiAgICAgIDx2YWx1ZSB2YWx1ZT0iNyIvPgogICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnIi8-CiAgICAgIDxjb2RlIHZhbHVlPSJ7c2NvcmV9Ii8-CiAgIDwvdmFsdWVRdWFudGl0eT4KICAgPGJvZHlTaXRlPgogICAgICA8Y29kaW5nPgogICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwczovL3N5bnRheHNjb3JlMjAyMC5jb20iLz4KICAgICAgICAgPGNvZGUgdmFsdWU9IjExIi8-CiAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJQcm94aW1hbCBjaXJjdW1mbGV4Ii8-CiAgICAgIDwvY29kaW5nPgogICA8L2JvZHlTaXRlPgo8L09ic2VydmF0aW9uPgo=";
		observationController.subsyntaxScoreDiffuselydiseased(true, diffuselydiseasedString);
		assertNotNull(diffuselydiseasedString);
	}
	
	@Test
	void subsyntaxScoreDiffuselydiseasedMultipartTest() throws Exception {
		 MockMultipartFile file = new MockMultipartFile("file", "test.xml", MediaType.APPLICATION_XML_VALUE, "<Observation><id value=\"bab603ef-901d-46fc-8275-342a8f6738e1\"></id></Observation>".getBytes());
		 MockMultipartFile[] fileNew = {file};
		 String str = observationController.subsyntaxScoreDiffuselydiseased(fileNew, true);
		 assertNotNull(str);
	}

	@Test
	void totalOcclusionFirstSegmentVisualizedTest() throws JsonProcessingException, UnsupportedEncodingException {
		String segmentString = "eyJudW1iZXIiOiIxNiIsIm5hbWUiOiJQb3N0ZXJvbGF0ZXJhbCBmcm9tIFJDQSIsImRlc2NyaXB0aW9uIjoiUG9zdGVyb2xhdGVyYWwgYnJhbmNoIG9yaWdpbmF0aW5nIGZyb20gdGhlIGRpc3RhbCBjb3JvbmFyeSBhcnRlcnkgZGlzdGFsIHRvIHRoZSBjcnV4LiJ9";
		observationController.totalOcclusionFirstSegmentVisualized(segmentString);
		assertNotNull(segmentString);
	}
}