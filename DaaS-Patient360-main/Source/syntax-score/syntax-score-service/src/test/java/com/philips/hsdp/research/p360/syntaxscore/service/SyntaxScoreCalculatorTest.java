package com.philips.hsdp.research.p360.syntaxscore.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.philips.hsdp.research.p360.syntaxscore.algorithm.service.impl.SyntaxScoreCalculator;
import com.philips.hsdp.research.p360.syntaxscore.controller.SyntaxScoreCalculateController;

/* @author Priyanka Mallick */
@RunWith(MockitoJUnitRunner.class)
class SyntaxScoreCalculatorTest {

	@InjectMocks
	SyntaxScoreCalculateController calculateController;
	@Mock
	ObjectMapper objectMapper;
	
	@Mock
	SyntaxScoreCalculator syntaxScoreCalculator;

	@SuppressWarnings("deprecation")
	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	void syntaxScorevalues() throws Exception {
		String S = "Test";
		String str = calculateController.syntaxScorevalues(S);
		assertNotNull(str);
	}

	@Test
	void scoreCalculatorTest() throws Exception {
		String syntaxString = "";
		String str = calculateController.scoreCalculator(syntaxString, 0);
		assertNotNull(str);
	}

	@Test
	void syntaxScoreSumaryTest() throws Exception {
		String str = calculateController.syntaxScoreSumary();
		assertNotNull(str);
	}

	@Test
	void syntaxScorevalueTest() throws Exception {
		String syntaxString = "";
		calculateController.syntaxScorevalue(syntaxString);
		assertNotNull(syntaxString);
	}
}